singularity.enabled = true
process.container = '/hpcnfs/data/SM/nfcore_singularity_image/chipseq_latest.sif'
singularity.runOptions = ' --bind /hpcnfs/ '
process.executor = 'pbspro'
process.clusterOptions = ' -q nocg_workq '
process.maxRetries = 5

env {
    PATH='$PATH:/hpcnfs/software/singularity/2.5.1/bin/:/hpcnfs/software/anaconda/anaconda3/bin/'
}

params {
  max_cpus = 16
  max_memory = 200.GB
  max_time = 900.h
}

process {
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:ALIGN_BWA_MEM:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_FLAGSTAT' {
    cpus = { check_max( 3 * task.attempt, 'cpus') }
    memory = { check_max( 40.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:ALIGN_BOWTIE2:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_FLAGSTAT' {
    cpus = { check_max( 3 * task.attempt, 'cpus') }
    memory = { check_max( 40.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:ALIGN_BOWTIE2:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_IDXSTATS' {
    cpus = { check_max( 3 * task.attempt, 'cpus') }
    memory = { check_max( 40.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:ALIGN_BWA_MEM:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_IDXSTATS' {
    cpus = { check_max( 3 * task.attempt, 'cpus') }
    memory = { check_max( 40.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:ALIGN_BOWTIE2:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_STATS' {
    cpus = { check_max( 3 * task.attempt, 'cpus') }
    memory = { check_max( 40.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:ALIGN_BWA_MEM:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_STATS' {
    cpus = { check_max( 3 * task.attempt, 'cpus') }
    memory = { check_max( 40.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:ALIGN_BWA_MEM:BAM_SORT_SAMTOOLS:SAMTOOLS_INDEX' {
    cpus = { check_max( 3 * task.attempt, 'cpus') }
    memory = { check_max( 40.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:ALIGN_BWA_MEM:BAM_SORT_SAMTOOLS:SAMTOOLS_INDEX' {
    cpus = { check_max( 3 * task.attempt, 'cpus') }
    memory = { check_max( 40.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:ALIGN_BOWTIE2:BAM_SORT_SAMTOOLS:SAMTOOLS_SORT' {
    cpus = { check_max( 4 * task.attempt, 'cpus') }
    memory = { check_max( 40.GB * task.attempt, 'memory') } 
  }


  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:ALIGN_BWA_MEM:BWA_MEM' {
    cpus = 10
    memory = 20.GB

  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:ALIGN_BOWTIE2:BOWTIE2_ALIGN' {
    cpus = { check_max( 12 * task.attempt, 'cpus') }
    memory = { check_max( 40.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:PREPARE_GENOME:BWA_INDEX' {
    cpus = 12
    memory = 20.GB
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:ANNOTATE_BOOLEAN_PEAKS' {
    cpus = 1
    memory = 12.GB
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:BEDTOOLS_GENOMECOV' {
    cpus = { check_max( 2 * task.attempt, 'cpus') }
    memory = { check_max( 12.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:CUSTOM_DUMPSOFTWAREVERSIONS' {
    cpus = 1
    memory = 1.GB
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:DEEPTOOLS_COMPUTEMATRIX' {
    cpus = { check_max( 9 * task.attempt, 'cpus') }
    memory = { check_max( 12.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:DEEPTOOLS_PLOTFINGERPRINT' {
    cpus = { check_max( 5 * task.attempt, 'cpus') }
    memory = { check_max( 12.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:DEEPTOOLS_PLOTHEATMAP' {
    cpus = { check_max( 4 * task.attempt, 'cpus') }
    memory = { check_max( 12.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:DEEPTOOLS_PLOTPROFILE' {
    cpus = { check_max( 4 * task.attempt, 'cpus') }
    memory = { check_max( 12.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:DESEQ2_QC' {
    cpus = 5
    memory = 12.GB
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:FASTQC_TRIMGALORE:FASTQC' {
    cpus = { check_max( 3 * task.attempt, 'cpus') }
    memory = { check_max( 12.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:FASTQC_TRIMGALORE:TRIMGALORE' {
    cpus = { check_max( 6 * task.attempt, 'cpus') }
    memory = { check_max( 12.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:FILTER_BAM_BAMTOOLS:BAM_FILTER' {
   cpus = { check_max( 8 * task.attempt, 'cpus') }
    memory = { check_max( 20.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:FILTER_BAM_BAMTOOLS:BAM_REMOVE_ORPHANS' {
    cpus = { check_max( 8 * task.attempt, 'cpus') }
    memory = { check_max( 20.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:FILTER_BAM_BAMTOOLS:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_FLAGSTAT' {
    cpus = { check_max( 8 * task.attempt, 'cpus') }
    memory = { check_max( 20.GB * task.attempt, 'memory') } 
  }
  
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:FILTER_BAM_BAMTOOLS:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_STATS' {
    cpus = 6
    memory = 20.GB
  }


  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:FRIP_SCORE' {
    cpus = { check_max( 2 * task.attempt, 'cpus') }
    memory = { check_max( 4.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:HOMER_ANNOTATEPEAKS_CONSENSUS' {
    cpus = { check_max( 3 * task.attempt, 'cpus') }
    memory = { check_max( 12.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:HOMER_ANNOTATEPEAKS_MACS2' {
    cpus = 3
    memory = 12.GB
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:IGV' {
    cpus = { check_max( 1 * task.attempt, 'cpus') }
    memory = { check_max( 1.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:INPUT_CHECK:SAMPLESHEET_CHECK' {
    cpus = 1
    memory = 1.GB
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:MACS2_CALLPEAK' {
    cpus = { check_max( 6 * task.attempt, 'cpus') }
    memory = { check_max( 20.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:MACS2_CONSENSUS' {
    cpus = { check_max( 6 * task.attempt, 'cpus') }
    memory = { check_max( 20.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:MARK_DUPLICATES_PICARD:BAM_STATS_SAMTOOLS:SAMTOOLS_STATS' {
    cpus = { check_max( 6 * task.attempt, 'cpus') }
    memory = { check_max( 20.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:MARK_DUPLICATES_PICARD:PICARD_MARKDUPLICATES' {
    cpus = { check_max( 6 * task.attempt, 'cpus') }
    memory = { check_max( 20.GB * task.attempt, 'memory') } 
  }

  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:MULTIQC' {
   cpus = { check_max( 3 * task.attempt, 'cpus') }
   memory = { check_max( 12.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:MULTIQC_CUSTOM_PEAKS' {
    cpus = 3
    memory = 12.GB
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:MULTIQC_CUSTOM_PHANTOMPEAKQUALTOOLS' {
    cpus = 5
    memory = 12.GB
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:PHANTOMPEAKQUALTOOLS' {
    cpus = { check_max( 4 * task.attempt, 'cpus') }
    memory = { check_max( 20.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:PICARD_COLLECTMULTIPLEMETRICS' {
    cpus = { check_max( 3 * task.attempt, 'cpus') }
    memory = { check_max( 20.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:PICARD_MERGESAMFILES' {
    cpus = 8
    memory = 20.GB
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:PLOT_HOMER_ANNOTATEPEAKS' {
    cpus = { check_max( 4 * task.attempt, 'cpus') }
    memory = { check_max( 12.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:PLOT_MACS2_QC' {
    cpus = { check_max( 4 * task.attempt, 'cpus') }
    memory = { check_max( 6.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:PREPARE_GENOME:CUSTOM_GETCHROMSIZES' {
    cpus = 3
    memory = 3.GB
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:PREPARE_GENOME:GENOME_BLACKLIST_REGIONS' {
    cpus = 3
    memory = 8.GB
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:PREPARE_GENOME:GTF2BED' {
    cpus = { check_max( 4 * task.attempt, 'cpus') }
    memory = { check_max( 6.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:PRESEQ_LCEXTRAP' {
    cpus = 4
    memory = 6.GB
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:SUBREAD_FEATURECOUNTS' {
    cpus = { check_max( 6 * task.attempt, 'cpus') }
    memory = { check_max( 8.GB * task.attempt, 'memory') } 
  }
  withName: 'NFCORE_CHIPSEQ:CHIPSEQ:UCSC_BEDGRAPHTOBIGWIG' {
    cpus = 4
    memory = 6.GB
  }
}
